name: Echo System Tests

on:
  push:
    branches: [ main, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  schedule:
    # 每天凌晨 2 点运行
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # # 基础代码检查
  # code-quality:
  #   name: Code Quality Checks
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         components: rustfmt, clippy

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'
  #         cache: 'npm'
  #         cache-dependency-path: 'echo-web-management/package-lock.json'

  #     - name: Rust format check
  #       run: |
  #         cargo fmt --all -- --check

  #     - name: Rust clippy check
  #       run: |
  #         cargo clippy --all-targets --all-features -- -D warnings

  #     - name: Node.js dependencies check
  #       working-directory: ./echo-web-management
  #       run: |
  #         npm ci
  #         npm run lint
  #         npm run build

  # 构建测试
  build:
    name: Build Services
    runs-on: ubuntu-latest
    # needs: code-quality
    outputs:
      images-built: ${{ steps.build.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker images
        id: build
        run: |
          # 创建环境文件
          cp .env.example .env

          # 构建 EchoKit Server 下载
          ./scripts/download-echokit-server.sh latest

          # 构建所有服务镜像
          docker compose build
          echo "success=true" >> $GITHUB_OUTPUT

  # 集成测试
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.images-built == 'true'
    strategy:
      matrix:
        test-suite: [
          { name: "Web-API Integration", script: "test_web_api_integration.sh" },
          { name: "API-Storage Integration", script: "test_api_storage_integration.sh" }
        ]
    services:
      # 预启动数据库服务用于测试
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create environment file
        run: |
          cp .env.example .env
          # 调整端口以避免冲突
          sed -i 's/9030:/9130:/g' .env
          sed -i 's/9031:/9131:/g' .env

      - name: Download EchoKit Server
        run: |
          ./scripts/download-echokit-server.sh latest

      - name: Start services
        run: |
          # 设置超时时间
          timeout 10m docker compose up -d

      - name: Wait for services to be ready
        run: |
          echo "等待服务启动..."
          for i in {1..60}; do
            if curl -f http://localhost:9131/health >/dev/null 2>&1; then
              echo "服务已就绪"
              break
            fi
            echo "等待中... ($i/60)"
            sleep 10
          done

      - name: Show service status
        run: |
          docker compose ps
          docker compose logs --tail=50

      - name: Run ${{ matrix.test-suite.name }}
        run: |
          ./tests/integration/${{ matrix.test-suite.script }} \
            --api-url http://localhost:9131 \
            --web-url http://localhost:9130 \
            --timeout 300

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "=== 收集服务日志 ==="
          docker compose logs --tail=200 > service-logs-${{ matrix.test-suite.name }}.txt
          echo "=== Docker Compose 状态 ==="
          docker compose ps
          echo "=== 系统资源使用 ==="
          docker stats --no-stream

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-${{ matrix.test-suite.name }}
          path: service-logs-${{ matrix.test-suite.name }}.txt
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v || true

  # 端到端测试
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Run full integration test suite
        run: |
          # 创建环境文件
          cp .env.example .env

          # 调整端口
          sed -i 's/9030:/9230:/g' .env
          sed -i 's/9031:/9231:/g' .env

          # 下载 EchoKit Server
          ./scripts/download-echokit-server.sh latest

          # 运行完整测试套件
          timeout 20m ./tests/integration/run_all_tests.sh \
            --timeout 900 \
            --skip-cleanup

      - name: Generate test report
        if: always()
        run: |
          echo "=== 测试报告 ===" > test-report.txt
          echo "测试时间: $(date)" >> test-report.txt
          echo "测试分支: ${{ github.ref_name }}" >> test-report.txt
          echo "提交 SHA: ${{ github.sha }}" >> test-report.txt
          echo "" >> test-report.txt

          if [ -f integration-test-report-*.txt ]; then
            cat integration-test-report-*.txt >> test-report.txt
          fi

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-report
          path: test-report.txt
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v || true
          rm -f .env integration-test-report-*.txt || true

  # 部署状态检查
  deployment-check:
    name: Deployment Health Check
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests]
    if: always() && (needs.integration-tests.result == 'success' && needs.e2e-tests.result == 'success')
    steps:
      - name: Create deployment status
        run: |
          echo "✅ 所有集成测试通过"
          echo "📊 测试统计:"
          echo "  - 代码质量检查: 通过"
          echo "  - 构建测试: 通过"
          echo "  - 集成测试: 通过"
          echo "  - 端到端测试: 通过"
          echo ""
          echo "🚀 Echo System 准备就绪，可以部署！"

  # 清理工作流
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, deployment-check]
    if: always()
    steps:
      - name: Cleanup test resources
        run: |
          echo "清理测试资源..."
          # 清理可能残留的容器
          docker system prune -f || true
          echo "清理完成"
